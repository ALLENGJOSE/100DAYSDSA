Brute Force:
import java.util.* ;
import java.io.*; 
public class Solution {
	public static int findSecondLargest(int n, int[] arr) {
		// Write your code here.
		int large1;
		int large2;

		large1=large2=Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++){
			large1=Math.max(large1,arr[i]);
		}
		for(int j=0;j<arr.length;j++){
			if(large1!=arr[j]){
			large2=Math.max(large2,arr[j]);
			}
		}
		if(large2==Integer.MIN_VALUE){
			return -1;
		}
		return large2;
		
	}
}
TC:O(N)
SC:O(1)
Optimized Approach:
public class Solution {
    public static int findSecondLargest(int n, int[] arr) {
        // Assuming the array has at least two elements
        int largest = arr[0];
        int secondLargest = Integer.MIN_VALUE;

        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > largest) {
                secondLargest = largest;
                largest = arr[i];
            } else if (arr[i] > secondLargest && arr[i] != largest) {
                secondLargest = arr[i];
            }
        }

        // If secondLargest is still Integer.MIN_VALUE, there is no second largest
        if (secondLargest == Integer.MIN_VALUE) {
            return -1;
        }

        return secondLargest;
    }
}
TC:O(N)
SC:O(1)
