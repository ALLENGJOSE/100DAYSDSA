Question:
You have been given an integer array/list 'ARR' of size 'N'. Write a solution to check if it could become non-decreasing by modifying at most 1 element.
We define an array as non-decreasing, if ARR[i] <= ARR[i + 1] holds for every i (0-based) such that (0 <= i <= N - 2)

Sample Input 1 :
2
3
8 4 6
3
8 4 2
Sample Output 1 :
true
false
Explanation to Sample Input 1 :
For Test Case 1 we can have a possible non-decreasing array : 2 4 6
Where only the element at index 0 has been modified.

For Test Case 2 there is no possible way to make the array non-decreasing by modifying at most 1 element.
Sample Input 2 :
2
6
-2 7 -1 0 1 2
5
-10 10 0 10 3
Sample Output 2 :
true
false
Explanation to Sample Input 2 :
For Test Case 1 we can have a possible non-decreasing array : -2 -2 -1 0 1 2
Where only the element at index 1 has been modified

For Test Case 2 there is no possible way to make the array non-decreasing by modifying at most 1 element.


Optimized Approach:
public class Solution {
    public static boolean isPossible(int[] arr, int n) {
        // Track the count of decreasing pairs
        int count = 0;

        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                count++;

                if (count > 1) // More than 1 decreasing pair, return false
                    return false;

                // If possible, try to adjust the elements to fix the decreasing pair
                if (i > 0 && arr[i - 1] > arr[i + 1]) // Check if adjusting previous element makes sense
                    arr[i + 1] = arr[i]; // Adjust next element
                else // Otherwise, adjust current element
                    arr[i] = arr[i + 1];
            }
        }

        return true;
    }
}
TC:O(N)
SC:O(1)
